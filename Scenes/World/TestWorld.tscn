[gd_scene load_steps=16 format=3 uid="uid://cw8qj4r2s5fak"]

[ext_resource type="Script" path="res://Scripts/World/WorldManager.gd" id="1_worldmanager"]

[sub_resource type="BoxMesh" id="BoxMesh_Ground"]
size = Vector3(200, 2, 200)

[sub_resource type="BoxShape3D" id="BoxShape3D_Ground"]
size = Vector3(200, 2, 200)

[sub_resource type="BoxMesh" id="BoxMesh_Building"]
size = Vector3(15, 20, 15)

[sub_resource type="BoxShape3D" id="BoxShape3D_Building"]
size = Vector3(15, 20, 15)

[sub_resource type="BoxMesh" id="BoxMesh_Barrier"]
size = Vector3(8, 3, 1)

[sub_resource type="BoxShape3D" id="BoxShape3D_Barrier"]
size = Vector3(8, 3, 1)

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_Ground"]
albedo_color = Color(0.3, 0.6, 0.3, 1)
roughness = 0.8

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_Building"]
albedo_color = Color(0.7, 0.7, 0.8, 1)
roughness = 0.6

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_Barrier"]
albedo_color = Color(0.8, 0.6, 0.4, 1)
roughness = 0.7

[sub_resource type="Shader" id="Shader_1"]
code = "shader_type sky;
render_mode use_debanding;

// Day/Night cycle settings
uniform float day_cycle_speed : hint_range(0.001, 0.5) = 0.3;
uniform vec3 day_sky_top : source_color = vec3(0.1, 0.4, 0.8);
uniform vec3 day_sky_horizon : source_color = vec3(0.6, 0.8, 1.0);
uniform vec3 night_sky_top : source_color = vec3(0.02, 0.02, 0.1);
uniform vec3 night_sky_horizon : source_color = vec3(0.1, 0.1, 0.2);
uniform vec3 sunset_color : source_color = vec3(1.0, 0.5, 0.2);
uniform float sky_curve : hint_range(0.1, 2.0) = 0.5;

// Cloud settings (independent of day/night)
uniform float cloud_coverage : hint_range(0.0, 1.0) = 0.6;
uniform float cloud_speed : hint_range(0.0, 2.0) = 0.3;
uniform vec3 cloud_day_color : source_color = vec3(1.0, 1.0, 1.0);
uniform vec3 cloud_night_color : source_color = vec3(0.3, 0.3, 0.4);
uniform vec3 cloud_sunset_color : source_color = vec3(1.0, 0.7, 0.5);

// Sun and moon settings
uniform vec3 sun_color : source_color = vec3(1.0, 0.9, 0.7);
uniform vec3 moon_color : source_color = vec3(0.8, 0.8, 1.0);
uniform float sun_size : hint_range(0.01, 0.1) = 0.06;
uniform float moon_size : hint_range(0.01, 0.1) = 0.03;

// Simple hash function
float hash(vec2 p) {
    return fract(sin(dot(p, vec2(127.1, 311.7))) * 43758.5453);
}

// Smooth noise
float noise(vec2 p) {
    vec2 i = floor(p);
    vec2 f = fract(p);
    f = f * f * (3.0 - 2.0 * f);
    
    return mix(
        mix(hash(i), hash(i + vec2(1.0, 0.0)), f.x),
        mix(hash(i + vec2(0.0, 1.0)), hash(i + vec2(1.0, 1.0)), f.x),
        f.y
    );
}

// Fractal noise for clouds
float fbm(vec2 p) {
    float value = 0.0;
    float amplitude = 0.5;
    
    for (int i = 0; i < 3; i++) {
        value += amplitude * noise(p);
        p *= 2.0;
        amplitude *= 0.5;
    }
    
    return value;
}

void sky() {
    // Calculate sun angle - continuous rotation
    float sun_angle = TIME * day_cycle_speed;  // Continuous rotation
    
    // Sun position using simple sin/cos (FULL 360Â° rotation)
    vec3 sun_direction = vec3(
        cos(sun_angle),         // X: east-west movement  
        sin(sun_angle),         // Y: vertical position
        0.0                     // Z: no depth
    );
    sun_direction = normalize(sun_direction);
    
    // Synchronize day/night with sun height
    float sun_height = sun_direction.y;  // -1 to 1 based on sun's actual position
    
    // Calculate day/night factors based on sun position
    float day_factor = clamp(sun_height, 0.0, 1.0);  // 0 to 1, day strength
    float sunset_factor = 1.0 - abs(sun_height);  // Peak at horizons (sun_height = 0)
    sunset_factor = pow(sunset_factor, 1.5);  // Gentler sunset window
    
    // Basic sky gradient
    float horizon_factor = clamp(EYEDIR.y, 0.0, 1.0);
    horizon_factor = smoothstep(0.0, 1.0, horizon_factor);
    horizon_factor = pow(horizon_factor, sky_curve);
    
    // Calculate sky colors based on sun position
    vec3 current_sky_top = mix(night_sky_top, day_sky_top, day_factor);
    vec3 current_sky_horizon = mix(night_sky_horizon, day_sky_horizon, day_factor);
    
    vec3 sky_color = mix(current_sky_horizon, current_sky_top, horizon_factor);
    
    // Add sunset/sunrise colors during transitions
    float sunset_vertical_fade = smoothstep(0.6, -0.2, EYEDIR.y);
    float sunset_blend = sunset_factor * sunset_vertical_fade;
    sky_color = mix(sky_color, sunset_color, sunset_blend * 0.5);
    
    // Add sun (visible only when above horizon)
    if (sun_height > -0.1) {  // Show sun when above horizon
        
        // Calculate if we're looking at the sun
        float sun_dot = dot(EYEDIR, sun_direction);
        
        // Sun disc with smooth edges
        float sun_distance = acos(clamp(sun_dot, -1.0, 1.0));
        float sun_disc = 1.0 - smoothstep(sun_size * 0.5, sun_size, sun_distance);
        float sun_glow = 1.0 - smoothstep(sun_size, sun_size * 4.0, sun_distance);
        
        // Sun brightness based on its height above horizon
        float sun_brightness = clamp((sun_height + 0.1) * 2.0, 0.0, 1.0);  // Bright when high, dim near horizon
        
        // Add sun to sky with proper brightness synchronization
        sky_color = mix(sky_color, sun_color, sun_disc * sun_brightness);
        sky_color = mix(sky_color, sun_color * 0.3, sun_glow * sun_brightness * 0.4);
    }
    
    // Add moon (static position during night)
    float night_factor = clamp(-sun_height, 0.0, 1.0);  // 0 to 1, night strength
    if (night_factor > 0.1) {
        // Moon in opposite position to sun
        vec3 moon_direction = vec3(0.0, 0.6, -0.8);  // Fixed position for now
        moon_direction = normalize(moon_direction);
        
        // Calculate if we're looking at the moon
        float moon_dot = dot(EYEDIR, moon_direction);
        
        // Moon disc with smooth edges
        float moon_distance = acos(clamp(moon_dot, -1.0, 1.0));
        float moon_disc = 1.0 - smoothstep(moon_size * 0.5, moon_size, moon_distance);
        float moon_glow = 1.0 - smoothstep(moon_size, moon_size * 2.0, moon_distance);
        
        // Add moon to sky
        sky_color = mix(sky_color, moon_color, moon_disc * night_factor * 0.8);
        sky_color = mix(sky_color, moon_color * 0.2, moon_glow * night_factor * 0.3);
    }
    
    // Add clouds (continuous movement regardless of day/night)
    if (EYEDIR.y > 0.0) {
        vec2 sky_uv = EYEDIR.xz / max(EYEDIR.y, 0.05);
        
        // Moving clouds - same logic as before for smooth movement
        vec2 cloud_uv1 = sky_uv * 3.0 + vec2(TIME * cloud_speed, 0.0);
        vec2 cloud_uv2 = sky_uv * 5.0 + vec2(-TIME * cloud_speed * 0.7, TIME * cloud_speed * 0.3);
        
        float clouds = fbm(cloud_uv1) * 0.7 + fbm(cloud_uv2) * 0.3;
        clouds = smoothstep(1.0 - cloud_coverage, 1.0, clouds);
        
        // Fade clouds near horizon
        clouds *= smoothstep(0.0, 0.3, EYEDIR.y);
        
        // Dynamic cloud colors based on time of day
        vec3 current_cloud_color = mix(cloud_night_color, cloud_day_color, day_factor);
        
        // Add sunset colors to clouds during transitions
        if (sunset_factor > 0.3) {
            current_cloud_color = mix(current_cloud_color, cloud_sunset_color, sunset_factor * 0.8);
        }
        
        // Mix clouds with sky
        sky_color = mix(sky_color, current_cloud_color, clouds * 0.8);
    }
    
    // Ground color (below horizon)
    if (EYEDIR.y <= 0.0) {
        vec3 ground_color = mix(night_sky_horizon, day_sky_horizon, day_factor) * 0.3;
        if (sunset_factor > 0.2) {
            ground_color = mix(ground_color, sunset_color * 0.4, sunset_factor);
        }
        sky_color = ground_color;
    }
    
    COLOR.rgb = sky_color;
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_1"]
shader = SubResource("Shader_1")

[sub_resource type="Sky" id="Sky_1"]
sky_material = SubResource("ShaderMaterial_1")

[sub_resource type="Environment" id="Environment_1"]
background_mode = 2
sky = SubResource("Sky_1")
ambient_light_source = 3
ambient_light_color = Color(0.8, 0.9, 1, 1)
ambient_light_energy = 0.3

[sub_resource type="BoxMesh" id="BoxMesh_Platform"]
size = Vector3(12, 1, 12)

[sub_resource type="BoxShape3D" id="BoxShape3D_Platform"]
size = Vector3(12, 1, 12)

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_Platform"]
albedo_color = Color(0.6, 0.5, 0.4, 1)
roughness = 0.5

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_Road"]
albedo_color = Color(0.2, 0.2, 0.2, 1)
roughness = 0.9

[node name="TestWorld" type="Node3D"]

[node name="WorldManager" type="Node3D" parent="." node_paths=PackedStringArray() script=ExtResource("1_worldmanager")]

[node name="Environment" type="Node3D" parent="."]

[node name="WorldEnvironment" type="WorldEnvironment" parent="Environment"]
environment = SubResource("Environment_1")

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="Environment"]
transform = Transform3D(0.707107, -0.5, 0.5, 0, 0.707107, 0.707107, -0.707107, -0.5, 0.5, 0, 20, 0)
light_energy = 1.0
shadow_enabled = true

[node name="Terrain" type="Node3D" parent="."]

[node name="Ground" type="MeshInstance3D" parent="Terrain"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -1, 0)
mesh = SubResource("BoxMesh_Ground")
surface_material_override/0 = SubResource("StandardMaterial3D_Ground")

[node name="StaticBody3D" type="StaticBody3D" parent="Terrain/Ground"]

[node name="CollisionShape3D" type="CollisionShape3D" parent="Terrain/Ground/StaticBody3D"]
shape = SubResource("BoxShape3D_Ground")

[node name="Buildings" type="Node3D" parent="."]

[node name="Building1" type="MeshInstance3D" parent="Buildings"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -40, 10, -40)
mesh = SubResource("BoxMesh_Building")
surface_material_override/0 = SubResource("StandardMaterial3D_Building")

[node name="StaticBody3D" type="StaticBody3D" parent="Buildings/Building1"]

[node name="CollisionShape3D" type="CollisionShape3D" parent="Buildings/Building1/StaticBody3D"]
shape = SubResource("BoxShape3D_Building")

[node name="Building2" type="MeshInstance3D" parent="Buildings"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 60, 10, -30)
mesh = SubResource("BoxMesh_Building")
surface_material_override/0 = SubResource("StandardMaterial3D_Building")

[node name="StaticBody3D" type="StaticBody3D" parent="Buildings/Building2"]

[node name="CollisionShape3D" type="CollisionShape3D" parent="Buildings/Building2/StaticBody3D"]
shape = SubResource("BoxShape3D_Building")

[node name="Building3" type="MeshInstance3D" parent="Buildings"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -20, 10, 50)
mesh = SubResource("BoxMesh_Building")
surface_material_override/0 = SubResource("StandardMaterial3D_Building")

[node name="StaticBody3D" type="StaticBody3D" parent="Buildings/Building3"]

[node name="CollisionShape3D" type="CollisionShape3D" parent="Buildings/Building3/StaticBody3D"]
shape = SubResource("BoxShape3D_Building")

[node name="Building4" type="MeshInstance3D" parent="Buildings"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 45, 10, 60)
mesh = SubResource("BoxMesh_Building")
surface_material_override/0 = SubResource("StandardMaterial3D_Building")

[node name="StaticBody3D" type="StaticBody3D" parent="Buildings/Building4"]

[node name="CollisionShape3D" type="CollisionShape3D" parent="Buildings/Building4/StaticBody3D"]
shape = SubResource("BoxShape3D_Building")

[node name="Obstacles" type="Node3D" parent="."]

[node name="Barrier1" type="MeshInstance3D" parent="Obstacles"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.5, -20)
mesh = SubResource("BoxMesh_Barrier")
surface_material_override/0 = SubResource("StandardMaterial3D_Barrier")

[node name="StaticBody3D" type="StaticBody3D" parent="Obstacles/Barrier1"]

[node name="CollisionShape3D" type="CollisionShape3D" parent="Obstacles/Barrier1/StaticBody3D"]
shape = SubResource("BoxShape3D_Barrier")

[node name="Barrier2" type="MeshInstance3D" parent="Obstacles"]
transform = Transform3D(0, 0, 1, 0, 1, 0, -1, 0, 0, 20, 1.5, 0)
mesh = SubResource("BoxMesh_Barrier")
surface_material_override/0 = SubResource("StandardMaterial3D_Barrier")

[node name="StaticBody3D" type="StaticBody3D" parent="Obstacles/Barrier2"]

[node name="CollisionShape3D" type="CollisionShape3D" parent="Obstacles/Barrier2/StaticBody3D"]
shape = SubResource("BoxShape3D_Barrier")

[node name="Barrier3" type="MeshInstance3D" parent="Obstacles"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -30, 1.5, 25)
mesh = SubResource("BoxMesh_Barrier")
surface_material_override/0 = SubResource("StandardMaterial3D_Barrier")

[node name="StaticBody3D" type="StaticBody3D" parent="Obstacles/Barrier3"]

[node name="CollisionShape3D" type="CollisionShape3D" parent="Obstacles/Barrier3/StaticBody3D"]
shape = SubResource("BoxShape3D_Barrier")

[node name="Platforms" type="Node3D" parent="."]

[node name="Platform1" type="MeshInstance3D" parent="Platforms"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -60, 3, 0)
mesh = SubResource("BoxMesh_Platform")
surface_material_override/0 = SubResource("StandardMaterial3D_Platform")

[node name="StaticBody3D" type="StaticBody3D" parent="Platforms/Platform1"]

[node name="CollisionShape3D" type="CollisionShape3D" parent="Platforms/Platform1/StaticBody3D"]
shape = SubResource("BoxShape3D_Platform")

[node name="Platform2" type="MeshInstance3D" parent="Platforms"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 5, 40)
mesh = SubResource("BoxMesh_Platform")
surface_material_override/0 = SubResource("StandardMaterial3D_Platform")

[node name="StaticBody3D" type="StaticBody3D" parent="Platforms/Platform2"]

[node name="CollisionShape3D" type="CollisionShape3D" parent="Platforms/Platform2/StaticBody3D"]
shape = SubResource("BoxShape3D_Platform")

[node name="VehicleAreas" type="Node3D" parent="."]

[node name="VehicleSpawnArea" type="Marker3D" parent="VehicleAreas"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 30, 1, -60)

[node name="ParkingArea1" type="Marker3D" parent="VehicleAreas"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -80, 1, -20)

[node name="ParkingArea2" type="Marker3D" parent="VehicleAreas"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 80, 1, 40)

[node name="SpawnPoints" type="Node3D" parent="."]

[node name="Spawn1" type="Marker3D" parent="SpawnPoints"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -10, 2, -10)

[node name="Spawn2" type="Marker3D" parent="SpawnPoints"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 10, 2, -10)

[node name="Spawn3" type="Marker3D" parent="SpawnPoints"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -10, 2, 10)

[node name="Spawn4" type="Marker3D" parent="SpawnPoints"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 10, 2, 10)

[node name="Spawn5" type="Marker3D" parent="SpawnPoints"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 6, 40)

[node name="Spawn6" type="Marker3D" parent="SpawnPoints"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -60, 4, 0) 